// This file and other files in the /seeds directory were generated by AI to help populate the database with initial data for testing and development purposes
// This file was not written by us

import "reflect-metadata";
import { AppDataSource } from "../data-source";
import { User, UserRole } from "../entity/User";
import { Course } from "../entity/Course";
import { Application } from "../entity/Application";
import * as bcrypt from "bcryptjs";

export class DatabaseSeeder {
	static async seedAll() {
		try {
			// Initialize database connection if not already initialized
			if (!AppDataSource.isInitialized) {
				await AppDataSource.initialize();
				console.log("Database connection initialized for seeding");
			}

			console.log("üå± Starting database seeding...");

			// Seed in order: Users -> Courses -> Applications
			await this.seedUsers();
			await this.seedCourses();
			await this.seedApplications();

			console.log("‚úÖ Database seeding completed successfully!");
		} catch (error) {
			console.error("‚ùå Error during seeding:", error);
			throw error;
		}
	}

	static async seedUsers() {
		const userRepository = AppDataSource.getRepository(User);

		console.log("üë• Seeding users...");

		// Check if users already exist
		const existingUsers = await userRepository.count();
		if (existingUsers > 1) {
			console.log(
				`‚ö†Ô∏è  Found ${existingUsers} existing users. Skipping user seeding.`
			);
			return;
		}

		const hashedPassword = await bcrypt.hash("Password123!", 10);

		const userData = [
			// Admin Users
			{
				firstName: "Admin",
				lastName: "User",
				email: "admin@university.edu",
				password: hashedPassword,
				role: UserRole.ADMIN,
				isBlocked: false,
			},

			// Lecturers
			{
				firstName: "Sarah",
				lastName: "Johnson",
				email: "sarah.johnson@university.edu",
				password: hashedPassword,
				role: UserRole.LECTURER,
				isBlocked: false,
			},
			{
				firstName: "Michael",
				lastName: "Chen",
				email: "michael.chen@university.edu",
				password: hashedPassword,
				role: UserRole.LECTURER,
				isBlocked: false,
			},
			{
				firstName: "Emily",
				lastName: "Rodriguez",
				email: "emily.rodriguez@university.edu",
				password: hashedPassword,
				role: UserRole.LECTURER,
				isBlocked: false,
			},
			{
				firstName: "David",
				lastName: "Williams",
				email: "david.williams@university.edu",
				password: hashedPassword,
				role: UserRole.LECTURER,
				isBlocked: false,
			},
			{
				firstName: "Lisa",
				lastName: "Anderson",
				email: "lisa.anderson@university.edu",
				password: hashedPassword,
				role: UserRole.LECTURER,
				isBlocked: false,
			},

			// Candidates (Students)
			{
				firstName: "John",
				lastName: "Smith",
				email: "john.smith@student.university.edu",
				password: hashedPassword,
				role: UserRole.CANDIDATE,
				isBlocked: false,
			},
			{
				firstName: "Emma",
				lastName: "Thompson",
				email: "emma.thompson@student.university.edu",
				password: hashedPassword,
				role: UserRole.CANDIDATE,
				isBlocked: false,
			},
			{
				firstName: "Michael",
				lastName: "Brown",
				email: "michael.brown@student.university.edu",
				password: hashedPassword,
				role: UserRole.CANDIDATE,
				isBlocked: false,
			},
			{
				firstName: "Sophia",
				lastName: "Davis",
				email: "sophia.davis@student.university.edu",
				password: hashedPassword,
				role: UserRole.CANDIDATE,
				isBlocked: false,
			},
			{
				firstName: "James",
				lastName: "Wilson",
				email: "james.wilson@student.university.edu",
				password: hashedPassword,
				role: UserRole.CANDIDATE,
				isBlocked: false,
			},
			{
				firstName: "Olivia",
				lastName: "Garcia",
				email: "olivia.garcia@student.university.edu",
				password: hashedPassword,
				role: UserRole.CANDIDATE,
				isBlocked: false,
			},
			{
				firstName: "William",
				lastName: "Martinez",
				email: "william.martinez@student.university.edu",
				password: hashedPassword,
				role: UserRole.CANDIDATE,
				isBlocked: false,
			},
			{
				firstName: "Ava",
				lastName: "Lee",
				email: "ava.lee@student.university.edu",
				password: hashedPassword,
				role: UserRole.CANDIDATE,
				isBlocked: false,
			},
			{
				firstName: "Benjamin",
				lastName: "Taylor",
				email: "benjamin.taylor@student.university.edu",
				password: hashedPassword,
				role: UserRole.CANDIDATE,
				isBlocked: false,
			},
			{
				firstName: "Isabella",
				lastName: "Moore",
				email: "isabella.moore@student.university.edu",
				password: hashedPassword,
				role: UserRole.CANDIDATE,
				isBlocked: false,
			},
			{
				firstName: "Lucas",
				lastName: "Jackson",
				email: "lucas.jackson@student.university.edu",
				password: hashedPassword,
				role: UserRole.CANDIDATE,
				isBlocked: false,
			},
			{
				firstName: "Mia",
				lastName: "White",
				email: "mia.white@student.university.edu",
				password: hashedPassword,
				role: UserRole.CANDIDATE,
				isBlocked: false,
			},
			// Some blocked candidates for testing
			{
				firstName: "Blocked",
				lastName: "User",
				email: "blocked.user@student.university.edu",
				password: hashedPassword,
				role: UserRole.CANDIDATE,
				isBlocked: true,
			},
		];

		const users = userRepository.create(userData);
		const savedUsers = await userRepository.save(users);

		console.log(`‚úÖ Created ${savedUsers.length} users`);
		return savedUsers;
	}

	static async seedCourses() {
		const courseRepository = AppDataSource.getRepository(Course);
		const userRepository = AppDataSource.getRepository(User);

		console.log("üìö Seeding courses...");

		// Check if courses already exist
		const existingCourses = await courseRepository.count();
		if (existingCourses > 0) {
			console.log(
				`‚ö†Ô∏è  Found ${existingCourses} existing courses. Skipping course seeding.`
			);
			return;
		}

		// Get lecturers to assign to courses
		const lecturers = await userRepository.find({
			where: { role: UserRole.LECTURER },
		});

		if (lecturers.length === 0) {
			console.log("‚ö†Ô∏è  No lecturers found. Please seed users first.");
			return;
		}

		const courseData = [
			{
				code: "COSC0001",
				name: "Advanced Programming Techniques",
				startDate: "2025-02-26",
				endDate: "2025-06-07",
				description:
					"Learn advanced programming concepts including design patterns, data structures, and algorithms.",
				lecturer: lecturers[0], // Dr. Sarah Johnson
			},
			{
				code: "COSC0002",
				name: "Database Systems",
				startDate: "2025-02-26",
				endDate: "2025-06-07",
				description:
					"Comprehensive study of database design, SQL, and database management systems.",
				lecturer: lecturers[1], // Prof. Michael Chen
			},
			{
				code: "COSC0003",
				name: "Web Development",
				startDate: "2025-07-22",
				endDate: "2025-11-15",
				description:
					"Modern web development using HTML, CSS, JavaScript, and popular frameworks.",
				lecturer: lecturers[2], // Dr. Emily Rodriguez
			},
			{
				code: "COSC0004",
				name: "Software Engineering",
				startDate: "2025-02-26",
				endDate: "2025-06-07",
				description:
					"Software development methodologies, project management, and team collaboration.",
				lecturer: lecturers[3], // Prof. David Williams
			},
			{
				code: "COSC0005",
				name: "Computer Networks",
				startDate: "2025-07-22",
				endDate: "2025-11-15",
				description:
					"Network protocols, architecture, and security fundamentals.",
				lecturer: lecturers[4], // Dr. Lisa Anderson
			},
			{
				code: "COSC0006",
				name: "Data Structures and Algorithms",
				startDate: "2025-02-26",
				endDate: "2025-06-07",
				description:
					"Fundamental data structures and algorithmic problem-solving techniques.",
				lecturer: lecturers[0], // Dr. Sarah Johnson
			},
			{
				code: "COSC0007",
				name: "Machine Learning",
				startDate: "2024-07-22",
				endDate: "2025-11-15",
				description:
					"Introduction to machine learning algorithms and artificial intelligence.",
				lecturer: lecturers[1], // Prof. Michael Chen
			},
			{
				code: "COSC0008",
				name: "Mobile Application Development",
				startDate: "2025-02-26",
				endDate: "2025-06-07",
				description:
					"Native and cross-platform mobile app development for iOS and Android.",
				lecturer: lecturers[2], // Dr. Emily Rodriguez
			},
		];

		const courses = courseRepository.create(courseData);
		const savedCourses = await courseRepository.save(courses);

		console.log(`‚úÖ Created ${savedCourses.length} courses`);
		return savedCourses;
	}

	static async seedApplications() {
		const applicationRepository = AppDataSource.getRepository(Application);
		const userRepository = AppDataSource.getRepository(User);
		const courseRepository = AppDataSource.getRepository(Course);

		console.log("üìù Seeding applications...");

		// Check if applications already exist
		const existingApplications = await applicationRepository.count();
		if (existingApplications > 0) {
			console.log(
				`‚ö†Ô∏è  Found ${existingApplications} existing applications. Skipping application seeding.`
			);
			return;
		}

		// Get candidates and courses
		const candidates = await userRepository.find({
			where: { role: UserRole.CANDIDATE, isBlocked: false },
		});

		const courses = await courseRepository.find();

		if (candidates.length === 0 || courses.length === 0) {
			console.log(
				"‚ö†Ô∏è  No candidates or courses found. Please seed users and courses first."
			);
			return;
		}

		const applicationTypes = ["Tutor", "Lab Assistant"];
		const availabilityOptions = ["Part Time", "Full Time"];

		const skillSets = [
			"Java, Python, JavaScript, Database Design",
			"C++, Data Structures, Algorithm Analysis",
			"React, Node.js, MongoDB, Express",
			"Python, Machine Learning, Data Analysis, Statistics",
			"Mobile Development, Swift, Kotlin, React Native",
			"Network Security, Cybersecurity, Ethical Hacking",
			"Web Development, HTML, CSS, PHP, MySQL",
			"Software Testing, QA, Automation, Selenium",
		];

		const academicCredentials = [
			"Bachelor of Computer Science (3rd year), GPA: 3.7/4.0, Dean's List",
			"Bachelor of Software Engineering (2nd year), GPA: 3.5/4.0",
			"Bachelor of Information Technology (3rd year), GPA: 3.8/4.0, Academic Excellence Award",
			"Bachelor of Computer Science (2nd year), GPA: 3.6/4.0",
			"Bachelor of Data Science (3rd year), GPA: 3.9/4.0, Honors Program",
			"Bachelor of Cybersecurity (2nd year), GPA: 3.4/4.0",
			"Bachelor of Computer Science (4th year), GPA: 3.8/4.0, Research Assistant",
		];

		const previousRoles = [
			"Peer tutor for Programming Fundamentals (6 months)",
			"Teaching assistant for Introduction to Computer Science (1 year)",
			"Lab monitor in Computer Science department (8 months)",
			"Freelance programming tutor (1.5 years)",
			"Student mentor for first-year students (1 year)",
			"Workshop facilitator for coding bootcamps (6 months)",
			"No previous teaching experience but strong academic performance",
		];

		const applicationData = [];

		// Generate multiple applications per candidate for different courses
		for (let i = 0; i < candidates.length; i++) {
			const candidate = candidates[i];

			// Each candidate applies for 1-3 courses
			const numApplications = Math.floor(Math.random() * 3) + 1;
			const selectedCourses = courses
				.sort(() => 0.5 - Math.random())
				.slice(0, numApplications);

			for (const course of selectedCourses) {
				applicationData.push({
					courseCode: course.code,
					availability:
						availabilityOptions[
							Math.floor(Math.random() * availabilityOptions.length)
						],
					academicCredentials:
						academicCredentials[
							Math.floor(Math.random() * academicCredentials.length)
						],
					previousRoles:
						previousRoles[
							Math.floor(Math.random() * previousRoles.length)
						],
					skills: skillSets[Math.floor(Math.random() * skillSets.length)],
					type: applicationTypes[
						Math.floor(Math.random() * applicationTypes.length)
					],
					userId: candidate.id,
					selected: Math.random() > 0.7, // 30% chance of being selected
				});
			}
		}

		const applications = applicationRepository.create(applicationData);
		const savedApplications = await applicationRepository.save(applications);

		console.log(`‚úÖ Created ${savedApplications.length} applications`);
		return savedApplications;
	}

	static async clearAllData() {
		console.log("üóëÔ∏è  Clearing all data...");

		const applicationRepository = AppDataSource.getRepository(Application);
		const courseRepository = AppDataSource.getRepository(Course);
		const userRepository = AppDataSource.getRepository(User);

		// Delete in reverse order of dependencies
		await applicationRepository.delete({});
		await courseRepository.delete({});
		await userRepository.delete({});

		console.log("‚úÖ All data cleared");
	}

	static async reseedDatabase() {
		console.log("üîÑ Reseeding database...");
		await this.clearAllData();
		await this.seedAll();
	}
}
